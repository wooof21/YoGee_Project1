package com.youge.jobfinder.vip;

import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.HashMap;

import model.Experience;

import org.apache.http.Header;
import org.apache.http.entity.StringEntity;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import popup.ContentPopUpWindowSingleButton;
import popup.PushPopUpWindow;
import progressdialog.CustomProgressDialog;
import tools.Config;
import tools.HttpClient;
import tools.Tools;
import android.app.Activity;
import android.app.Notification;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.text.TextUtils;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

import com.loopj.android.http.AsyncHttpResponseHandler;
import com.nostra13.universalimageloader.core.ImageLoader;

import com.youge.jobfinder.BaseActivity;
import com.youge.jobfinder.MainActivity;
import com.youge.jobfinder.R;

public class ExamineUserResumeActivity extends BaseActivity implements
		OnClickListener {

	private TextView name, sex, birth, height, speciality, occupation, address,
			education, school, phone, email, title_tv;

	private ImageView iv_labelOne, iv_labelTwo, iv_labelThree, userImgOne,
			userImgTwo, userImgThree, back;

	private FrameLayout fl_labelOne, fl_labelTwo, fl_labelThree;
	public Handler mHandler;

	private ListView skillListview;
	private ListView experienceListView;
	private MyAdapter mAdapter;
	private ExAdapter exAdapter;

	private ArrayList<String[]> skillImgList;
	private ArrayList<Experience> experienceList;

	/** 消息标识 简历获取成功 */
	protected static final int FIND_RESUME_SUCCESS = 1;

	// 简历数据
	private Object[] dataObj;
	// 编辑简历数据
	private Object[] changeUserResumeObj;
	// 用户照片数量
	private int userImgNum;
	// 用户技能数量
	private Boolean isFromOtherInfo = false;
	private Boolean isFromVipCenter = false;
	private String otherUserID, orderState;
	private registerReceiver receiver;
	private LinearLayout parent;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.resume_main);
		findView();
		initView();
		handMessage();
		if (isFromOtherInfo) {
			UserResume(otherUserID);
		} else {
			UserResume(new Tools().getUserId(this));
		}
	}

	/**
	 * 
	 * @param
	 */
	@Override
	protected void onResume() {
		// TODO Auto-generated method stub
		super.onResume();
		registerReceiver();
	}

	/**
	 * 
	 * @param
	 */
	@Override
	protected void onPause() {
		// TODO Auto-generated method stub
		super.onPause();
	}

	/**
	 * 根据ID查找控件
	 */
	private void findView() {
		name = (TextView) findViewById(R.id.name);
		sex = (TextView) findViewById(R.id.sex);
		birth = (TextView) findViewById(R.id.birth);
		height = (TextView) findViewById(R.id.height);
		speciality = (TextView) findViewById(R.id.speciality);
		occupation = (TextView) findViewById(R.id.occupation);
		address = (TextView) findViewById(R.id.address);
		education = (TextView) findViewById(R.id.education);
		school = (TextView) findViewById(R.id.school);
		phone = (TextView) findViewById(R.id.phone);
		email = (TextView) findViewById(R.id.email);
		title_tv = (TextView) findViewById(R.id.title_tv);
		fl_labelOne = (FrameLayout) findViewById(R.id.fl_labelOne);
		fl_labelTwo = (FrameLayout) findViewById(R.id.fl_labelTwo);
		fl_labelThree = (FrameLayout) findViewById(R.id.fl_labelThree);
		iv_labelOne = (ImageView) findViewById(R.id.iv_labelOne);
		iv_labelTwo = (ImageView) findViewById(R.id.iv_labelTwo);
		iv_labelThree = (ImageView) findViewById(R.id.iv_labelThree);
		userImgOne = (ImageView) findViewById(R.id.userImgOne);
		userImgTwo = (ImageView) findViewById(R.id.userImgTwo);
		userImgThree = (ImageView) findViewById(R.id.userImgThree);
		back = (ImageView) findViewById(R.id.back);
		skillListview = (ListView) findViewById(R.id.skillListview);
		experienceListView = (ListView) findViewById(R.id.experienceListview);
		parent = (LinearLayout) findViewById(R.id.parent);
		experienceListView.setFocusable(false);
		skillListview.setFocusable(false);
	}

	/**
	 * 初始化控件 添加点击事件
	 */
	private void initView() {
		// // 透明状态栏
		// getWindow()
		// .addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);
		// // 透明导航栏
		// getWindow().addFlags(
		// WindowManager.LayoutParams.FLAG_TRANSLUCENT_NAVIGATION);
		title_tv.setOnClickListener(this);
		back.setOnClickListener(this);
		isFromOtherInfo = getIntent().getBooleanExtra("isFromOtherInfo", false);
		otherUserID = getIntent().getStringExtra("otherUserID");
		skillImgList = new ArrayList<String[]>();
		changeUserResumeObj = new Object[4];
		mAdapter = new MyAdapter();
		skillListview.setAdapter(mAdapter);
		experienceList = new ArrayList<Experience>();
		exAdapter = new ExAdapter();
		experienceListView.setAdapter(exAdapter);
		isFromVipCenter = getIntent().getBooleanExtra("isFromVipCenter", false);
		if (isFromVipCenter) {
			title_tv.setVisibility(View.VISIBLE);
		}
		orderState = getIntent().getExtras().getString("orderState", "0");
	}

	/**
	 * 处理消息
	 * 
	 */
	private void handMessage() {
		mHandler = new Handler(new Handler.Callback() {

			@Override
			public boolean handleMessage(Message msg) {
				switch (msg.what) {
				case FIND_RESUME_SUCCESS:
					dataObj = (Object[]) msg.obj;
					HashMap<String, String> hashMap = (HashMap<String, String>) dataObj[0];
					changeUserResumeObj[0] = hashMap;
					ArrayList<String> userImgList = (ArrayList<String>) dataObj[1];
					changeUserResumeObj[1] = userImgList;
					skillImgList = (ArrayList<String[]>) dataObj[2];
					changeUserResumeObj[2] = skillImgList;
					experienceList = (ArrayList<Experience>) dataObj[3];
					changeUserResumeObj[3] = experienceList;
					name.setText(hashMap.get("name"));
					if ("1".equals(hashMap.get("sex"))) {
						sex.setText("男");
					} else {
						sex.setText("女");
					}
					birth.setText(hashMap.get("birthday"));
					height.setText(hashMap.get("height") + "/"
							+ hashMap.get("weight"));
					speciality.setText(hashMap.get("speciality"));
					occupation.setText(hashMap.get("occupation"));
					address.setText(hashMap.get("address"));
					education.setText(hashMap.get("education"));
					school.setText(hashMap.get("school"));
					if(orderState.equals("3")){
						phone.setText(hashMap.get("phone"));
						email.setText(hashMap.get("email"));
					}else{
						phone.setText(hashMap.get("phone").substring(0,
								3)
								+ "****"
								+ hashMap.get("phone").subSequence(7,
										hashMap.get("phone").length()));	
						email.setText("*****@***.***");
					}
					String lable = (String) hashMap.get("label");
					if (!TextUtils.isEmpty(lable)) {
						String[] str = lable.split("\\,");
						if (str.length == 1) {
							labelImg(iv_labelOne, str[0]);
							setVisible(null, fl_labelOne);
						} else if (str.length == 2) {
							labelImg(iv_labelOne, str[0]);
							labelImg(iv_labelTwo, str[1]);
							setVisible(null, fl_labelOne);
							setVisible(null, fl_labelTwo);
						} else if (str.length == 3) {
							labelImg(iv_labelOne, str[0]);
							labelImg(iv_labelTwo, str[1]);
							labelImg(iv_labelThree, str[2]);
							setVisible(null, fl_labelOne);
							setVisible(null, fl_labelTwo);
							setVisible(null, fl_labelThree);
						}
					}
					if (userImgList != null || !("").equals(userImgList)) {
						userImgNum = userImgList.size();
						if (userImgNum == 1) {
							imgLoader(userImgList.get(0), userImgOne);
						} else if (userImgNum == 2) {
							imgLoader(userImgList.get(0), userImgOne);
							imgLoader(userImgList.get(1), userImgTwo);
							setVisible(userImgTwo, null);
						} else if (userImgNum == 3) {
							imgLoader(userImgList.get(0), userImgOne);
							imgLoader(userImgList.get(1), userImgTwo);
							imgLoader(userImgList.get(2), userImgThree);
							setVisible(userImgTwo, null);
							setVisible(userImgThree, null);
						}
					}
					mAdapter.notifyDataSetChanged();
					exAdapter.notifyDataSetChanged();
					break;
				default:
					break;
				}
				return false;
			}

		});
	}

	/**
	 * 列表的数据适配器
	 * 
	 */
	class MyAdapter extends BaseAdapter {
		class ViewHolder {
			public ImageView img;
			public TextView tx_skill_img;
		}

		@Override
		public int getCount() {
			return skillImgList.size();
		}

		@Override
		public Object getItem(int position) {
			return skillImgList.get(position);
		}

		@Override
		public long getItemId(int position) {
			return position;
		}

		@Override
		public View getView(int position, View convertView, ViewGroup parent) {
			ViewHolder viewHolder;
			if (convertView == null) {
				convertView = View.inflate(getApplicationContext(),
						R.layout.skill_list, null);
				viewHolder = new ViewHolder();
				viewHolder.tx_skill_img = (TextView) convertView
						.findViewById(R.id.tx_skill_img);
				viewHolder.img = (ImageView) convertView
						.findViewById(R.id.add_photo);
				convertView.setTag(viewHolder);
			} else {
				viewHolder = (ViewHolder) convertView.getTag();
			}
			viewHolder.tx_skill_img.setText(skillImgList.get(position)[0]);
			ImageLoader.getInstance().displayImage(
					skillImgList.get(position)[1], viewHolder.img);
			return convertView;
		}

	}

	/**
	 * 列表的数据适配器
	 * 
	 */
	class ExAdapter extends BaseAdapter {
		class ViewHolder {
			public TextView startDate, endDate, employer, obligation,
					monthCount;
		}

		@Override
		public int getCount() {
			return experienceList.size();
		}

		@Override
		public Object getItem(int position) {
			return experienceList.get(position);
		}

		@Override
		public long getItemId(int position) {
			return position;
		}

		@Override
		public View getView(int position, View convertView, ViewGroup parent) {
			ViewHolder viewHolder;
			if (convertView == null) {
				convertView = View.inflate(getApplicationContext(),
						R.layout.experience_list, null);
				viewHolder = new ViewHolder();
				viewHolder.startDate = (TextView) convertView
						.findViewById(R.id.startDate);
				viewHolder.endDate = (TextView) convertView
						.findViewById(R.id.endDate);
				viewHolder.employer = (TextView) convertView
						.findViewById(R.id.Employer);
				viewHolder.obligation = (TextView) convertView
						.findViewById(R.id.obligation);
				viewHolder.monthCount = (TextView) convertView
						.findViewById(R.id.month);
				convertView.setTag(viewHolder);
			} else {
				viewHolder = (ViewHolder) convertView.getTag();
			}
			viewHolder.startDate.setText(experienceList.get(position)
					.getStartDate());
			viewHolder.endDate.setText(experienceList.get(position)
					.getEndDate());
			viewHolder.employer.setText(experienceList.get(position)
					.getEmployer());
			viewHolder.obligation.setText(experienceList.get(position)
					.getObligation());
			viewHolder.monthCount.setText("("
					+ mouthcount(experienceList.get(position).getStartDate(),
							experienceList.get(position).getEndDate()) + ")");
			return convertView;
		}

	}

	private String mouthcount(String startDate, String endDate) {
		String count = "";
		int sYear = Integer.parseInt(startDate.split("\\.")[0]);
		int sMonth = Integer.parseInt(startDate.split("\\.")[1]);
		int eYear = Integer.parseInt(endDate.split("\\.")[0]);
		int eMonth = Integer.parseInt(endDate.split("\\.")[1]);
		if (eYear - sYear != 0) {
			count = eYear - sYear + "年";
		}
		if (eMonth - sMonth != 0) {
			count = count + (eMonth - sMonth + "月");
		}

		return count;
	}

	/**
	 * 设置标签图片
	 */
	private void labelImg(ImageView img, String num) {
		if ("1".equals(num)) {
			img.setImageDrawable(getResources().getDrawable(R.drawable.zhu_one));
		} else if ("2".equals(num)) {
			img.setImageDrawable(getResources().getDrawable(R.drawable.xiu_one));
		} else if ("3".equals(num)) {
			img.setImageDrawable(getResources().getDrawable(R.drawable.zhi_one));
		} else if ("4".equals(num)) {
			img.setImageDrawable(getResources().getDrawable(R.drawable.che_one));
		} else if ("5".equals(num)) {
			img.setImageDrawable(getResources()
					.getDrawable(R.drawable.song_one));
		} else if ("6".equals(num)) {
			img.setImageDrawable(getResources().getDrawable(R.drawable.jia_one));
		}
	}

	/**
	 * 设置图片可见
	 */
	private void setVisible(ImageView img, FrameLayout frame) {
		if (img != null) {
			img.setVisibility(View.VISIBLE);
		}
		if (frame != null) {
			frame.setVisibility(View.VISIBLE);
		}
	}

	/**
	 * 加载图片
	 */
	private void imgLoader(String path, ImageView img) {
		ImageLoader.getInstance().displayImage(path, img);
	}

	/**
	 * 获取个人简历
	 */
	private void UserResume(String uid) {
		final CustomProgressDialog pd = CustomProgressDialog.createDialog(this);
		JSONObject job = new JSONObject();

		try {
			job.put("userid", uid);

			StringEntity se = new StringEntity(job.toString());
			HttpClient.post(this, Config.FIND_USER_RESUME_URL, se,
					new AsyncHttpResponseHandler() {

						@Override
						public void onSuccess(int arg0, Header[] arg1,
								byte[] arg2) {
							pd.dismiss();
							if (arg0 == 200) {
								String str = new String(arg2);
								System.out.println("查看简历接口返回 ---> " + str);
								String message = "";
								try {
									Message msg = mHandler.obtainMessage();
									JSONObject result = new JSONObject(str);
									String state = result.getString("state");
									message = result.getString("msg");
									if (state.equals("success")) {
										JSONObject data = result
												.getJSONObject("data");
										Log.v("个人简历", data.toString());
										JSONObject userResume = data
												.getJSONObject("userResume");
										HashMap<String, String> hashMap = new HashMap<String, String>();
										hashMap.put("id",
												userResume.getString("id"));
										hashMap.put("name",
												userResume.getString("name"));
										hashMap.put("sex",
												userResume.getString("sex"));
										hashMap.put("birthday", userResume
												.getString("birthday"));
										hashMap.put("height",
												userResume.getString("height"));
										hashMap.put("weight",
												userResume.getString("weight"));
										hashMap.put("speciality", userResume
												.getString("speciality"));
										hashMap.put("occupation", userResume
												.getString("occupation"));
										hashMap.put("address",
												userResume.getString("address"));
										hashMap.put("education", userResume
												.getString("education"));
										hashMap.put("school",
												userResume.getString("school"));
										hashMap.put("phone",
												userResume.getString("phone"));
										hashMap.put("label",
												userResume.getString("label"));
										hashMap.put("email",
												userResume.getString("email"));

										JSONArray imgList = userResume
												.getJSONArray("imgList");
										ArrayList<String> userImgList = new ArrayList<String>();
										for (int i = 0, j = imgList.length(); i < j; i++) {

											String imgUrl = imgList
													.optString(i);
											userImgList.add(imgUrl);
										}

										JSONArray skillImg = userResume
												.getJSONArray("skillImg");
										ArrayList<String[]> skillImgList = new ArrayList<String[]>();
										for (int i = 0, j = skillImg.length(); i < j; i++) {
											String[] img = new String[2];
											JSONObject imgData = skillImg
													.getJSONObject(i);
											img[0] = imgData.getString("name");
											img[1] = imgData.getString("img");
											skillImgList.add(img);
										}

										// TODO
										JSONArray expList = userResume
												.getJSONArray("work");
										ArrayList<Experience> expLists = new ArrayList<Experience>();
										for (int i = 0, j = expList.length(); i < j; i++) {
											Experience experience = new Experience();
											JSONObject imgData = expList
													.getJSONObject(i);
											experience.setId(imgData
													.getString("wid"));
											experience.setStartDate(imgData
													.getString("startDate"));
											experience.setEndDate(imgData
													.getString("endDate"));
											experience.setEmployer(imgData
													.getString("workUnit"));
											experience.setObligation(imgData
													.getString("position"));
											expLists.add(experience);
										}

										msg.what = FIND_RESUME_SUCCESS;
										msg.obj = new Object[] { hashMap,
												userImgList, skillImgList,
												expLists };
										msg.sendToTarget();

									} else {
										Toast.makeText(
												ExamineUserResumeActivity.this,
												message, Toast.LENGTH_SHORT)
												.show();
									}
								} catch (JSONException e) {
									e.printStackTrace();
								}
							}
						}

						@Override
						public void onFailure(int arg0, Header[] arg1,
								byte[] arg2, Throwable arg3) {
							pd.dismiss();
							// 网络断开时进行相关操作
							Toast.makeText(ExamineUserResumeActivity.this,
									"网络连接失败，请检测网络！", Toast.LENGTH_SHORT).show();
						}
					});
		} catch (JSONException e) {
			e.printStackTrace();
			pd.dismiss();
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			pd.dismiss();
		}
	}

	@Override
	public void onClick(View v) {
		switch (v.getId()) {
		case R.id.title_tv:
			Intent intent = new Intent(getApplicationContext(),
					ChangeUserResumeActivity.class);
			Bundle mBundle = new Bundle();
			mBundle.putSerializable("userresume", changeUserResumeObj);
			intent.putExtras(mBundle);
			intent.putExtra("isFromExamine", "1");
			startActivity(intent);
			finish();
			break;
		case R.id.back:
			finish();
			break;
		default:
			break;
		}

	}

	@Override
	protected void onDestroy() {
		super.onDestroy();
	}

	/**
	 * 注册广播
	 * 
	 */
	private void registerReceiver() {
		receiver = new registerReceiver();
		IntentFilter filter = new IntentFilter();
		filter.addAction("com.service.fresh");
		registerReceiver(receiver, filter);
	}

	/**
	 * 接收广播，设置下拉刷新是否显示
	 * 
	 */
	private PushPopUpWindow pp;
	private PushPopUpWindow[] pps = new PushPopUpWindow[] { null, null };

	protected class registerReceiver extends BroadcastReceiver {

		@Override
		public void onReceive(Context context, Intent intent) {

			if ("1".equals(new Tools().getNotificationType(context))
					|| "2".equals(new Tools().getNotificationType

					(context))) {
				if (pps[0] != null && pps[0].isShowing()) {
					pps[0].dismiss();
				}
				pp = new PushPopUpWindow(ExamineUserResumeActivity.this,
						parent, new Tools().getNotificationText(context),
						new Tools().getNotificationType(context),
						"ExamineUserResumeActivity");
				pps[0] = pp;
			} else if ("3".equals(new Tools().getNotificationType(context))) {
				if (pps[0] != null && pps[0].isShowing()) {
					pps[0].dismiss();
				}
				mandatoryExit(context);
			} else {
				NotificationManager nManager = (NotificationManager)

				context.getSystemService

				(context.NOTIFICATION_SERVICE);
				Notification notification = new Notification();
				notification.icon = R.drawable.logo;// 设置通知的图标
				// 添加声音提示
				notification.defaults = Notification.DEFAULT_SOUND;
				// audioStreamType的值必须AudioManager中的值，代表着响铃的模式
				notification.audioStreamType =

				android.media.AudioManager.ADJUST_LOWER;
				notification.defaults = Notification.DEFAULT_VIBRATE;
				notification.flags = Notification.FLAG_AUTO_CANCEL;
				long[] vibrate = { 0, 100, 200, 300 };
				notification.vibrate = vibrate;

				notification.tickerText = "找事吧"; // 显示在状态栏中的文字
				PendingIntent pendingIntent = PendingIntent.getActivity(
						context, 0, new Intent(), 0);
				// 点击状态栏的图标出现的提示信息设置
				notification.setLatestEventInfo(context, "找事吧", new Tools

				().getNotificationText(context), pendingIntent);
				nManager.notify(1000, notification);
			}

		}
	}

	/**
	 * 用户在其他地方登陆
	 */
	private void mandatoryExit(Context context) {
		String CID = new Tools().getCID(ExamineUserResumeActivity.this);
		String notificationText = new Tools()
				.getNotificationText(ExamineUserResumeActivity.this);
		unBindAlias(new Tools().getUserId(ExamineUserResumeActivity.this),
				new Tools().getCID(ExamineUserResumeActivity.this),
				ExamineUserResumeActivity.this);
		SharedPreferences sharedPre = ExamineUserResumeActivity.this
				.getSharedPreferences("user", Context.MODE_PRIVATE);
		SharedPreferences.Editor editor = sharedPre.edit();

		editor.clear();
		editor.putString("cid", CID);
		editor.putString("notificationText", notificationText);
		editor.commit();
		new ContentPopUpWindowSingleButton(ExamineUserResumeActivity.this,
				parent, new Tools().getNotificationText(context));
	}

	/**
	 * 绑定账户
	 */
	private void unBindAlias(String uid, String cid, Context context) {
		JSONObject job = new JSONObject();

		try {
			job.put("userid", uid);
			job.put("cid", cid);
			job.put("type", "1");// 强制退出是0

			StringEntity se = new StringEntity(job.toString());
			HttpClient.post(context, Config.UN_BIND_ALIAS, se,
					new AsyncHttpResponseHandler() {

						@Override
						public void onSuccess(int arg0, Header[]

						arg1, byte[] arg2) {
							if (arg0 == 200) {
								String str = new String

								(arg2);
								System.out.println("解除绑定账户接口返回 ---> " + str);
								String message = "";
								try {
									JSONObject result =

									new JSONObject(str);
									String state =

									result.getString("state");
									message =

									result.getString("msg");
									if (state.equals

									("success")) {
										JSONObject

										data = result

										.getJSONObject("data");
										Log.v("别人资料", data.toString());
										String

										results = data

										.getString("result");
										if

										("0".equals(results)) {

											Log.v("别人资料", "提交失败");
										} else {

											Log.v("别人资料", "提交成功");
										}
									}
								} catch (JSONException e) {
									e.printStackTrace

									();
								}
							}
						}

						@Override
						public void onFailure(int arg0, Header[]

						arg1, byte[] arg2, Throwable

						arg3) {
						}
					});
		} catch (JSONException e) {
			e.printStackTrace();
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}
	}

	// protected void onPause() {
	// super.onPause();
	// unregisterReceiver(receiver);
	// }

	@Override
	protected void onStop() {
		// TODO Auto-generated method stub
		unregisterReceiver(receiver);
		super.onStop();
	}

}
