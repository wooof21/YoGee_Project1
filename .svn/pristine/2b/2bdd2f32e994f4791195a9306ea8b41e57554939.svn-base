/**
 * 
 * @param
 */
package fragment;

import java.util.ArrayList;
import java.util.HashMap;

import model.NearbyRightLvItemModel;
import view.CustomListView;
import view.PinnedHeaderListView;
import view.PinnedHeaderListView.PinnedHeaderAdapter;

import com.umeng.analytics.MobclickAgent;
import com.youge.jobfinder.R;

import discover.NearbyShopDetailActivity;

import adapter.NearbyLeftLvAdapter;
import android.app.Activity;
import android.app.Fragment;
import android.app.FragmentManager;
import android.content.Context;
import android.os.Bundle;
import android.os.Handler;
import android.text.TextUtils;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnTouchListener;
import android.view.animation.AccelerateInterpolator;
import android.view.animation.Animation;
import android.view.animation.AnimationSet;
import android.view.animation.LinearInterpolator;
import android.view.animation.RotateAnimation;
import android.view.animation.ScaleAnimation;
import android.view.animation.TranslateAnimation;
import android.view.animation.Animation.AnimationListener;
import android.view.ViewGroup;
import android.widget.AbsListView;
import android.widget.BaseAdapter;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.LinearLayout.LayoutParams;
import android.widget.ListView;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.AbsListView.OnScrollListener;

/**
 * 
 * @param
 */
public class NearbyShopDetailFragmentLeft extends Fragment{

	private CustomListView leftLv;
	private PinnedHeaderListView rightLv;
	private RelativeLayout parent;
	private ImageView cart;

	private ArrayList<HashMap<String, String>> leftList;
	private ArrayList<NearbyRightLvItemModel> rightList;
	private NearbyLeftLvAdapter leftLvAdapter;
	private RightLvAdapter rightLvAdapter;
	private NearbyCallBack callBack;

	private ViewGroup anim_mask_layout; // 动画层
	private ImageView buyImg; // 这是在界面上跑的小图片
	private int buyNum = 0; // 购买数量

	/**
	 * 
	 * @param
	 */
	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState){
		// TODO Auto-generated method stub
		View view = inflater.inflate(R.layout.nearby_shop_detail_fragment_left,
				null);
		initView(view);
		return view;
	}

	/**
	 * 
	 * @param
	 */
	@Override
	public void onAttach(Activity activity){
		// TODO Auto-generated method stub
		super.onAttach(activity);
		callBack = (NearbyShopDetailActivity) activity;
	}

	private void initView(View root){
		leftLv = (CustomListView) root
				.findViewById(R.id.nearby_left_fragment_lv1);
		rightLv = (PinnedHeaderListView) root
				.findViewById(R.id.nearby_left_fragment_lv2);
		parent = (RelativeLayout) root
				.findViewById(R.id.nearby_left_fragment_parent);
		cart = (ImageView) root.findViewById(R.id.nearby_left_fragment_cart);

		int height = getArguments().getInt("height");
		// LayoutParams leftLp = (LayoutParams) leftLv.getLayoutParams();
		// LayoutParams rightLp = (LayoutParams) rightLv.getLayoutParams();
		// leftLp.height = height - Tools.dip2px(getActivity(), 55);
		// rightLp.height = height - Tools.dip2px(getActivity(), 55);
		// leftLv.setLayoutParams(leftLp);
		// rightLv.setLayoutParams(rightLp);

		Log.e("height", height + "");
		LayoutParams parentLp = (LayoutParams) parent.getLayoutParams();
		parentLp.height = height;
		parent.setLayoutParams(parentLp);

		leftList = new ArrayList<HashMap<String, String>>();
		rightList = new ArrayList<NearbyRightLvItemModel>();
		leftLvAdapter = new NearbyLeftLvAdapter(getActivity(), leftList);
		rightLvAdapter = new RightLvAdapter(getActivity(), rightList);
		leftLv.setAdapter(leftLvAdapter);
		rightLv.setAdapter(rightLvAdapter);
		
		

		final int[] start_location =
				new int[2];// 一个整型数组，用来存储按钮的在屏幕的X、Y坐标
		start_location[0] = 427;
		start_location[1] = 195;
		
		new Handler().postDelayed(new Runnable(){
			
			@Override
			public void run(){
				// TODO Auto-generated method stub
				buyImg = new ImageView(getActivity());
				buyImg.setImageResource(R.drawable.default_head);
				setAnim(buyImg, start_location);
			}
		}, 2000);

		// leftLv.setOnTouchListener(new OnTouchListener(){
		//
		// @Override
		// public boolean onTouch(View v, MotionEvent event){
		// // TODO Auto-generated method stub
		// Log.e("left", "setOnTouchListener");
		// return false;
		// }
		// });
		// rightLv.setOnTouchListener(new OnTouchListener(){
		//
		// @Override
		// public boolean onTouch(View v, MotionEvent event){
		// // TODO Auto-generated method stub
		// Log.e("right", "setOnTouchListener");
		// rightLv.requestFocus();
		// return false;
		// }
		// });
	}

	private void createRightData(){
		NearbyRightLvItemModel model1 = new NearbyRightLvItemModel(1, "销量排行",
				"酸溜溜", "1022", "0.1", true, false);
		NearbyRightLvItemModel model2 = new NearbyRightLvItemModel(2, "销量排行",
				"亲嘴烧", "563", "0.5", false, true);
		NearbyRightLvItemModel model3 = new NearbyRightLvItemModel(0, "销量排行",
				"小当家", "698", "0.5", false, true);
		NearbyRightLvItemModel model5 = new NearbyRightLvItemModel(3, "新品零食",
				"红牛", "441", "6", true, false);
		NearbyRightLvItemModel model6 = new NearbyRightLvItemModel(3, "新品零食",
				"红牛", "441", "6", true, false);
	}

	private float leftDownY, rightDownY;

	class RightLvAdapter extends BaseAdapter implements OnScrollListener,
			PinnedHeaderAdapter{

		private Context context;
		private ArrayList<NearbyRightLvItemModel> list;
		private LayoutInflater lInflater;

		/**
		 * @param context
		 * @param list
		 */
		public RightLvAdapter(Context context,
				ArrayList<NearbyRightLvItemModel> list){
			super();
			this.context = context;
			this.list = list;
			this.lInflater = LayoutInflater.from(context);
		}

		/**
		 * 
		 * @param
		 */
		@Override
		public int getCount(){
			// TODO Auto-generated method stub
			return 20;
		}

		/**
		 * 
		 * @param
		 */
		@Override
		public Object getItem(int position){
			// TODO Auto-generated method stub
			return list.get(position);
		}

		/**
		 * 
		 * @param
		 */
		@Override
		public long getItemId(int position){
			// TODO Auto-generated method stub
			return position;
		}

		/**
		 * 
		 * @param
		 */
		@Override
		public View getView(int position, View convertView, ViewGroup parent){
			// TODO Auto-generated method stub
			if (convertView == null){
				convertView = lInflater.inflate(R.layout.nearby_right_lv_item,
						null);
			}
			ViewHolder vHolder = new ViewHolder();
			vHolder.category = (TextView) convertView
					.findViewById(R.id.nearby_right_lv_item_category);
			vHolder.pic = (ImageView) convertView
					.findViewById(R.id.nearby_right_lv_item_pic);
			vHolder.title = (TextView) convertView
					.findViewById(R.id.nearby_right_lv_item_title);
			vHolder.monthlySell = (TextView) convertView
					.findViewById(R.id.nearby_right_lv_item_monthlysell);
			vHolder.price = (TextView) convertView
					.findViewById(R.id.nearby_right_lv_item_price);
			vHolder.iv = (ImageView) convertView
					.findViewById(R.id.nearby_right_lv_item_iv);

			// NearbyRightLvItemModel model = list.get(position);
			// if ( needTitle(position) ) {
			// // 显示标题并设置内容
			// vHolder.category.setText(model.getCategory());
			// vHolder.category.setVisibility(View.VISIBLE);
			// } else {
			// // 内容项隐藏标题
			// vHolder.category.setVisibility(View.GONE);
			// }
			// convertView.setOnClickListener(new OnClickListener(){
			//
			// @Override
			// public void onClick(View v){
			// // TODO Auto-generated method stub
			// Log.e("RightLvAdapter", "right");
			// }
			// });
			return convertView;
		}

		class ViewHolder{
			TextView category;
			ImageView pic;
			TextView title;
			TextView monthlySell;
			TextView price;
			ImageView iv;
		}

		/**
		 * 
		 * @param
		 */
		@Override
		public int getPinnedHeaderState(int position){
			// TODO Auto-generated method stub
			if (getCount() == 0 || position < 0){
				return PinnedHeaderAdapter.PINNED_HEADER_GONE;
			}

			if (isMove(position) == true){
				return PinnedHeaderAdapter.PINNED_HEADER_PUSHED_UP;
			}

			return PinnedHeaderAdapter.PINNED_HEADER_VISIBLE;
		}

		/**
		 * 
		 * @param
		 */
		@Override
		public void configurePinnedHeader(View headerView, int position,
				int alpaha){
			// TODO Auto-generated method stub
			// 设置标题的内容
			NearbyRightLvItemModel itemEntity = (NearbyRightLvItemModel) getItem(position);
			String headerValue = itemEntity.getTitle();

			Log.e("header = ", "" + headerValue);

			if (!TextUtils.isEmpty(headerValue)){
				TextView headerTextView = (TextView) headerView
						.findViewById(R.id.nearby_right_lv_item_header);
				headerTextView.setText(headerValue);
			}
		}

		/**
		 * 
		 * @param
		 */
		@Override
		public void onScrollStateChanged(AbsListView view, int scrollState){
			// TODO Auto-generated method stub

		}

		/**
		 * 
		 * @param
		 */
		@Override
		public void onScroll(AbsListView view, int firstVisibleItem,
				int visibleItemCount, int totalItemCount){
			// TODO Auto-generated method stub
			if (view instanceof PinnedHeaderListView){
				((PinnedHeaderListView) view)
						.controlPinnedHeader(firstVisibleItem);
			}
		}

		/**
		 * 判断是否需要显示标题
		 * 
		 * @param position
		 * @return
		 */
		private boolean needTitle(int position){
			// 第一个肯定是分类
			if (position == 0){
				return true;
			}

			// 异常处理
			if (position < 0){
				return false;
			}

			// 当前 // 上一个
			NearbyRightLvItemModel currentEntity = (NearbyRightLvItemModel) getItem(position);
			NearbyRightLvItemModel previousEntity = (NearbyRightLvItemModel) getItem(position - 1);
			if (null == currentEntity || null == previousEntity){
				return false;
			}

			String currentTitle = currentEntity.getTitle();
			String previousTitle = previousEntity.getTitle();
			if (null == previousTitle || null == currentTitle){
				return false;
			}

			// 当前item分类名和上一个item分类名不同，则表示两item属于不同分类
			if (currentTitle.equals(previousTitle)){
				return false;
			}

			return true;
		}

		private boolean isMove(int position){
			// 获取当前与下一项
			NearbyRightLvItemModel currentEntity = (NearbyRightLvItemModel) getItem(position);
			NearbyRightLvItemModel nextEntity = (NearbyRightLvItemModel) getItem(position + 1);
			if (null == currentEntity || null == nextEntity){
				return false;
			}

			// 获取两项header内容
			String currentTitle = currentEntity.getTitle();
			String nextTitle = nextEntity.getTitle();
			if (null == currentTitle || null == nextTitle){
				return false;
			}

			// 当前不等于下一项header，当前项需要移动了
			if (!currentTitle.equals(nextTitle)){
				return true;
			}

			return false;
		}

	}

	/**
	 * @Description: 创建动画层
	 * @param
	 * @return void
	 * @throws
	 */
	private ViewGroup createAnimLayout(){
		ViewGroup rootView = (ViewGroup) getActivity().getWindow()
				.getDecorView();
		LinearLayout animLayout = new LinearLayout(getActivity());
		LinearLayout.LayoutParams lp = new LinearLayout.LayoutParams(
				LinearLayout.LayoutParams.MATCH_PARENT,
				LinearLayout.LayoutParams.MATCH_PARENT);
		animLayout.setLayoutParams(lp);
		animLayout.setId(Integer.MAX_VALUE);
		animLayout.setBackgroundResource(android.R.color.transparent);
		rootView.addView(animLayout);
		return animLayout;
	}

	private View addViewToAnimLayout(final ViewGroup vg, final View view,
			int[] location){
		int x = location[0];
		int y = location[1];
		LinearLayout.LayoutParams lp = new LinearLayout.LayoutParams(
				LinearLayout.LayoutParams.WRAP_CONTENT,
				LinearLayout.LayoutParams.WRAP_CONTENT);
		lp.leftMargin = x;
		lp.topMargin = y;
		view.setLayoutParams(lp);
		return view;
	}

	private void setAnim(final View v, int[] start_location){
		anim_mask_layout = null;
		anim_mask_layout = createAnimLayout();
		anim_mask_layout.removeAllViews();
		anim_mask_layout.addView(v);// 把动画小球添加到动画层

		final View view = addViewToAnimLayout(anim_mask_layout, v,
				start_location);
		int[] end_location = new int[2];// 这是用来存储动画结束位置的X、Y坐标
		cart.getLocationInWindow(end_location);// shopCart是那个购物车

//		// 缩放
//		Animation scaleAnimation = new ScaleAnimation(0.3f, 0.1f, 0.6f, 0.1f);
//		// 设置动画时间
//		scaleAnimation.setDuration(10);
//		scaleAnimation.setInterpolator(new LinearInterpolator());
//		scaleAnimation.setRepeatCount(0);// 动画重复执行的次数
//		scaleAnimation.setFillAfter(true);
//		// 旋转
//		Animation rotateAnimation = new RotateAnimation(0f, 360f);
//		rotateAnimation.setRepeatCount(0);// 动画重复执行的次数

		// 计算位移
		int endX = end_location[0] + 100 - start_location[0];// 动画位移的X坐标
		int endY = end_location[1] - start_location[1];// 动画位移的y坐标

		TranslateAnimation translateAnimationX = new TranslateAnimation(0,
				endX, 0, 0);
		translateAnimationX.setInterpolator(new LinearInterpolator());
		translateAnimationX.setRepeatCount(0);// 动画重复执行的次数
		translateAnimationX.setFillAfter(true);

		TranslateAnimation translateAnimationY = new TranslateAnimation(0, 0,
				0, endY);
		translateAnimationY.setInterpolator(new AccelerateInterpolator());
		translateAnimationY.setRepeatCount(0);// 动画重复执行的次数
		translateAnimationX.setFillAfter(true);

		AnimationSet set = new AnimationSet(false);
		set.setFillAfter(false);
		set.addAnimation(translateAnimationY);
		set.addAnimation(translateAnimationX);
		set.setDuration(2000);// 动画的执行时间
		view.startAnimation(set);
		// 动画监听事件
		set.setAnimationListener(new AnimationListener(){
			// 动画的开始
			@Override
			public void onAnimationStart(Animation animation){
				v.setVisibility(View.VISIBLE);
			}

			@Override
			public void onAnimationRepeat(Animation animation){
				// TODO Auto-generated method stub
			}

			// 动画的结束
			@Override
			public void onAnimationEnd(Animation animation){
				v.setVisibility(View.GONE);
				buyNum++;// 让购买数量加1
			}
		});

	}

	/**
	 * 
	 * @param
	 */
	@Override
	public void onCreate(Bundle savedInstanceState){
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
		MobclickAgent.openActivityDurationTrack(false);
	}

	/**
	 * 
	 * @param
	 */
	@Override
	public void onResume(){
		// TODO Auto-generated method stub
		MobclickAgent.onPageStart("NearbyShopDetailFragmentLeft"); // 统计页面(仅有Activity的应用中SDK自动调用，不需要单独写)
		super.onResume();
	}

	/**
	 * 
	 * @param
	 */
	@Override
	public void onPause(){
		// TODO Auto-generated method stub
		MobclickAgent.onPageEnd("NearbyShopDetailFragmentLeft"); // （仅有Activity的应用中SDK自动调用，不需要单独写）保证
		// onPageEnd 在onPause
		// 之前调用,因为 onPause 中会保存信息
		super.onPause();
	}
}
