/**
 * 
 * @param
 */
package com.youge.jobfinder.vip;

import java.io.UnsupportedEncodingException;
import java.util.HashMap;

import org.apache.http.Header;
import org.apache.http.entity.StringEntity;
import org.json.JSONException;
import org.json.JSONObject;

import progressdialog.CustomProgressDialog;
import tools.Config;
import tools.Exit;
import tools.HttpClient;
import tools.Tools;
import view.RoundImageView;
import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.FrameLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.loopj.android.http.AsyncHttpResponseHandler;
import com.nostra13.universalimageloader.core.ImageLoader;
import com.youge.jobfinder.BaseActivity;
import com.youge.jobfinder.R;

/**
 * 
 * @param
 */
public class PersonalCenterMain extends BaseActivity implements OnClickListener{

	private TextView sign, name, job, credit, balance;
	private RoundImageView head;
	private FrameLayout myBalance, realName, myResume, bindAccount, msgNotify,
			shareToFriend, serviceCenter, moreSetting;

	/**
	 * 
	 * @param
	 */
	@Override
	protected void onCreate(Bundle savedInstanceState){
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
		setContentView(R.layout.vip_center_main);
		initView();

		userInfoHttpClient(new Tools().getUserId(this));
	}

	/**
	 * 
	 * @param
	 */
	@Override
	protected void onResume(){
		// TODO Auto-generated method stub
		super.onResume();
	}

	/**
	 * 
	 * @param
	 */
	@Override
	protected void onPause(){
		// TODO Auto-generated method stub
		super.onPause();
	}

	private void initView(){
		// // 透明状态栏
		// getWindow()
		// .addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);
		// // 透明导航栏
		// getWindow().addFlags(
		// WindowManager.LayoutParams.FLAG_TRANSLUCENT_NAVIGATION);
		Exit.getInstance().addActivity(this);
		sign = (TextView) findViewById(R.id.title_tv);
		name = (TextView) findViewById(R.id.vip_main_name);
		job = (TextView) findViewById(R.id.vip_main_job);
		credit = (TextView) findViewById(R.id.vip_main_credit);
		balance = (TextView) findViewById(R.id.vip_main_balance);
		head = (RoundImageView) findViewById(R.id.vip_main_head);
		myBalance = (FrameLayout) findViewById(R.id.vip_main_mybalacne);
		realName = (FrameLayout) findViewById(R.id.vip_main_realname);
		myResume = (FrameLayout) findViewById(R.id.vip_main_myresume);
		bindAccount = (FrameLayout) findViewById(R.id.vip_main_bindaccount);
		msgNotify = (FrameLayout) findViewById(R.id.vip_main_msgnotification);
		shareToFriend = (FrameLayout) findViewById(R.id.vip_main_sharetofriend);
		serviceCenter = (FrameLayout) findViewById(R.id.vip_main_servicecenter);
		moreSetting = (FrameLayout) findViewById(R.id.vip_main_moresetting);

		sign.setOnClickListener(this);
		head.setOnClickListener(this);
		myBalance.setOnClickListener(this);
		realName.setOnClickListener(this);
		myResume.setOnClickListener(this);
		bindAccount.setOnClickListener(this);
		msgNotify.setOnClickListener(this);
		shareToFriend.setOnClickListener(this);
		serviceCenter.setOnClickListener(this);
		moreSetting.setOnClickListener(this);

	}

	private Handler handler = new Handler(){

		@Override
		public void handleMessage(Message msg){
			// TODO Auto-generated method stub
			super.handleMessage(msg);
			switch(msg.what){
				case 1: // 信息展示
					HashMap<String, String> hashMap = (HashMap<String, String>) msg.obj;
					ImageLoader.getInstance().displayImage(hashMap.get("img"),
							head);
					name.setText(hashMap.get("username"));
					if (hashMap.get("occupation").equals("")
							|| hashMap.get("occupation").equals(" ")){
						job.setVisibility(View.GONE);
					}else{
						job.setText(hashMap.get("occupation"));
					}
					balance.setText(hashMap.get("money") + "元");
					credit.setText(hashMap.get("point") + "分");
				break;
				case 2:
					String resumeResult = (String) msg.obj;
					if ("1".equals(resumeResult)){
						startActivity(new Intent(PersonalCenterMain.this,
								ExamineUserResumeActivity.class));
					}else if ("0".equals(resumeResult)){
						Intent intent = new Intent(PersonalCenterMain.this,
								ChangeUserResumeActivity.class);
						intent.putExtra("isFromExamine", "0");
						startActivity(intent);
					}
				break;
				default:
				break;
			}
		}

	};

	/**
	 * 
	 * @param
	 */
	@Override
	public void onClick(View v){
		// TODO Auto-generated method stub
		Log.e("点击", v.getId() + "");
		switch(v.getId()){

			case R.id.title_tv:

			break;
			case R.id.vip_main_head: // 进入修改资料
				startActivity(new Intent(PersonalCenterMain.this,
						ChangeUserInfoActivity.class));
			break;
			case R.id.vip_main_myresume:// 进入简历
				UserResume(new Tools().getUserId(this));
			break;
			case R.id.vip_main_moresetting: // 更多设置
				startActivity(new Intent(PersonalCenterMain.this,
						MoreSettingMainActivity.class));
			break;
			case R.id.vip_main_mybalacne: // 我的余额
				startActivity(new Intent(PersonalCenterMain.this,
						MyBalanceActivity.class));
			break;
			case R.id.vip_main_msgnotification:
				startActivity(new Intent(PersonalCenterMain.this,
						MyMessageMainActivity.class));
			break;
			default:
			break;
		}
	}

	private void userInfoHttpClient(String uid){
		final CustomProgressDialog pd = CustomProgressDialog.createDialog(this);
		JSONObject job = new JSONObject();

		try{
			job.put("userid", uid);

			StringEntity se = new StringEntity(job.toString(), "utf-8");
			HttpClient.post(this, Config.GET_USER_INFO_URL, se,
					new AsyncHttpResponseHandler(){

						@Override
						public void onSuccess(int arg0, Header[] arg1,
								byte[] arg2){
							// TODO Auto-generated method stub
							pd.dismiss();
							if (arg0 == 200){
								String str = new String(arg2);
								System.out.println("个人信息接口返回 ---> " + str);
								String message = "";
								try{
									JSONObject result = new JSONObject(str);
									String state = result.getString("state");
									message = result.getString("msg");
									if (state.equals("success")){
										JSONObject data = result
												.getJSONObject("data");
										JSONObject user = data
												.getJSONObject("user");
										HashMap<String, String> hashMap = new HashMap<String, String>();
										hashMap.put("birthday",
												user.getString("birthday"));
										hashMap.put("money",
												user.getString("money"));
										hashMap.put("phone",
												user.getString("phone"));
										hashMap.put("sex",
												user.getString("sex"));
										hashMap.put("userid",
												user.getString("userid"));
										hashMap.put("username",
												user.getString("username"));
										hashMap.put("img",
												user.getString("img"));
										hashMap.put("city",
												user.getString("city"));
										hashMap.put("point",
												user.getString("point"));
										hashMap.put("occupation",
												user.getString("occupation"));

										Message msg = handler.obtainMessage();
										msg.what = 1;
										msg.obj = hashMap;
										msg.sendToTarget();

									}else{
										Toast.makeText(PersonalCenterMain.this,
												message, Toast.LENGTH_SHORT)
												.show();
									}
								}catch(JSONException e){
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
							}
						}

						@Override
						public void onFailure(int arg0, Header[] arg1,
								byte[] arg2, Throwable arg3){
							// TODO Auto-generated method stub
							pd.dismiss();
							// 网络断开时进行相关操作
							Toast.makeText(PersonalCenterMain.this,
									"网络连接失败，请检测网络！", Toast.LENGTH_SHORT).show();
						}
					});
		}catch(JSONException e){
			// TODO Auto-generated catch block
			e.printStackTrace();
			pd.dismiss();
		}catch(UnsupportedEncodingException e){
			// TODO Auto-generated catch block
			e.printStackTrace();
			pd.dismiss();
		}
	}

	/**
	 * 获取个人简历
	 */
	private void UserResume(String uid){
		final CustomProgressDialog pd = CustomProgressDialog.createDialog(this);
		JSONObject job = new JSONObject();

		try{
			job.put("userid", uid);

			StringEntity se = new StringEntity(job.toString());
			HttpClient.post(this, Config.FIND_USER_RESUME_URL, se,
					new AsyncHttpResponseHandler(){

						@Override
						public void onSuccess(int arg0, Header[] arg1,
								byte[] arg2){
							pd.dismiss();
							if (arg0 == 200){
								String str = new String(arg2);
								System.out.println("查看简历接口返回 ---> " + str);
								String message = "";
								try{
									Message msg = handler.obtainMessage();
									JSONObject result = new JSONObject(str);
									String state = result.getString("state");
									message = result.getString("msg");
									if (state.equals("success")){
										JSONObject data = result
												.getJSONObject("data");
										Log.v("个人简历", data.toString());
										String resumeResult = data
												.getString("result");

										msg.what = 2;
										msg.obj = resumeResult;
										msg.sendToTarget();

									}else{
										Toast.makeText(PersonalCenterMain.this,
												message, Toast.LENGTH_SHORT)
												.show();
									}
								}catch(JSONException e){
									e.printStackTrace();
								}
							}
						}

						@Override
						public void onFailure(int arg0, Header[] arg1,
								byte[] arg2, Throwable arg3){
							pd.dismiss();
							// 网络断开时进行相关操作
							Toast.makeText(PersonalCenterMain.this,
									"网络连接失败，请检测网络！", Toast.LENGTH_SHORT).show();
						}
					});
		}catch(JSONException e){
			e.printStackTrace();
			pd.dismiss();
		}catch(UnsupportedEncodingException e){
			e.printStackTrace();
			pd.dismiss();
		}
	}
}
